// Function#call() fonctionne comme un appel normal, mais prÃ©cise dâ€™abord le
// `this` Ã  utiliser dans le contexte dâ€™exÃ©cution.

exports.zomg = 'OH NOES!'

const aurore = { name: 'Aurore' }

function sayHi(whom) {
  console.log(`Salut ${whom} moi câ€™est ${this.name}`)
  console.log('arguments[0] = ', arguments[0])
}

sayHi.call(aurore, 'Elliott')
// => Logue Â«Â Salut Elliott moi câ€™est AuroreÂ Â» puis `'Elliott'`

// Mais les fonctions flÃ©chÃ©es nâ€™ont PAS de contexte, vous vous souvenezÂ ?  Du
// coup, **Ã©chec silencieux** avec `this` Ã  `undefined`, ce qui est trÃ¨s
// dangereux.

const greet = (whom) => {
  console.log(`Salut ${whom} moi câ€™est ${this.name}`)
  console.log('arguments[0] = ', arguments[0])
}

greet.call(aurore, 'Elliott')
// => Logue Â«Â Salut Elliott moi câ€™est undefinedÂ Â», puis `{ zomg: 'OH NOES!' }`,
// car `this` comme arguments[0] sont en fait lâ€™interface dâ€™export du module
// FOURNIE PAR LA FONCTION Dâ€™ENROBAGE COMMONJS! ğŸ˜¨ (Si vous exÃ©cutez Ã§a dans
// Node.jsÂ ; dans un navigateur, Ã§a devrait carrÃ©ment planter faute de
// `arguments` rÃ©solu.)
