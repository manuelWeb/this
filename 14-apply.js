// Function#apply() prend deux argumentsÂ : le `this` Ã  utiliser dans le contexte
// dâ€™exÃ©cution, et un *array-like* des arguments Ã  passer.  Pratique pour Ã©crire
// du code gÃ©nÃ©rique, ne se souciant pas du nombre exact dâ€™arguments, sans pour
// autant nÃ©cessiter lâ€™opÃ©rateur *spread* (`...`) dâ€™ES2015.

exports.name = 'foutu'

const aurore = { name: 'Aurore' }
const args = ['Elliott', '415', '555', '0126']

function callMeMaybe(whom, area, prefix, line) {
  const tel = `${area}-${prefix}-${line}`
  console.log(`Salut ${whom} moi câ€™est ${this.name}, appelle-moi au ${tel}`)
  console.log('arguments[3] = ', arguments[3])
}

callMeMaybe.apply(aurore, args)
// => Logue Â«Â Salut Elliott moi câ€™est Aurore, appelle-moi au 415-555-0126Â Â»,
// puis `'0126'`.

// Mais les fonctions flÃ©chÃ©es nâ€™ont PAS de contexte, vous vous souvenezÂ ?  Du
// coup, **Ã©chec silencieux**, ce qui est trÃ¨s dangereux.

const callMeNever = (whom, area, prefix, line) => {
  const tel = `${area}-${prefix}-${line}`
  console.log(`Salut ${whom} moi câ€™est ${this.name}, appelle-moi au ${tel}`)
  console.log('arguments[3] = ', arguments[3])
}

callMeNever.apply(aurore, args)
// => Logue Â«Â Salut Elliott moi câ€™est foutu, appelle-moi au 415-555-0126Â Â» (car
// `this` est en fait `exports`), puis le `__filename` pour ce fichier FOURNI
// PAR LA FONCTION Dâ€™ENROBAGE COMMONJS!  ðŸ˜¨ (Si vous exÃ©cutez Ã§a dans Node.jsÂ ;
// dans un navigateur, Ã§a devrait carrÃ©ment planter faute de `arguments`
// rÃ©solu.)
